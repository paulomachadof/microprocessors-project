
Projeto01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000f80  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001144  08001144  00011144  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001154  08001154  00011154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001158  08001158  00011158  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  0800115c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000005c  20000004  08001160  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000060  08001160  00020060  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_line   00003e10  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0000a90b  00000000  00000000  00023e44  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001ab9  00000000  00000000  0002e74f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000748  00000000  00000000  00030208  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000bf8  00000000  00000000  00030950  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00005462  00000000  00000000  00031548  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002ad1  00000000  00000000  000369aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007e  00000000  00000000  0003947b  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001368  00000000  00000000  000394fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000004 	.word	0x20000004
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800112c 	.word	0x0800112c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000008 	.word	0x20000008
 8000200:	0800112c 	.word	0x0800112c

08000204 <ASM_GPIO_ReadPin>:
.equ IDR, 0x10
.equ RESET_BIT, 0x00

ASM_GPIO_ReadPin:

	ldr r3, [r0, #IDR]
 8000204:	6903      	ldr	r3, [r0, #16]
	and r3, r3, r1
 8000206:	ea03 0301 	and.w	r3, r3, r1
	mov r0, r3
 800020a:	4618      	mov	r0, r3

	cmp r3, #RESET_BIT
 800020c:	2b00      	cmp	r3, #0
	IT EQ
 800020e:	bf08      	it	eq
	moveq r0, #RESET_BIT
 8000210:	2000      	moveq	r0, #0

BX LR
 8000212:	4770      	bx	lr

08000214 <ASM_GPIO_WritePin>:
.equ BSRR, 0x18 //offset do registrador BSRR
.equ RESET_BIT, 0x00

ASM_GPIO_WritePin:

	cmp r2, #RESET_BIT //compara se o estado o pino está zerado (RESET)
 8000214:	2a00      	cmp	r2, #0
	IT EQ //Se forem iguais, faça a proxima linha
 8000216:	bf08      	it	eq
	lsleq r1, r1, #16 //desloca o "valor" de R1 em 16 posições para realizar o RESET
 8000218:	0409      	lsleq	r1, r1, #16
	str r1, [r0, #BSRR] //escreve o valor de R1 no registrador BSRR na porta informada por R0
 800021a:	6181      	str	r1, [r0, #24]

BX LR
 800021c:	4770      	bx	lr
	...

08000220 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000220:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000258 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000224:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000226:	e003      	b.n	8000230 <LoopCopyDataInit>

08000228 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000228:	4b0c      	ldr	r3, [pc, #48]	; (800025c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800022a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800022c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800022e:	3104      	adds	r1, #4

08000230 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000230:	480b      	ldr	r0, [pc, #44]	; (8000260 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000232:	4b0c      	ldr	r3, [pc, #48]	; (8000264 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000234:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000236:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000238:	d3f6      	bcc.n	8000228 <CopyDataInit>
  ldr  r2, =_sbss
 800023a:	4a0b      	ldr	r2, [pc, #44]	; (8000268 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800023c:	e002      	b.n	8000244 <LoopFillZerobss>

0800023e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800023e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000240:	f842 3b04 	str.w	r3, [r2], #4

08000244 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000244:	4b09      	ldr	r3, [pc, #36]	; (800026c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000246:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000248:	d3f9      	bcc.n	800023e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800024a:	f000 f813 	bl	8000274 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800024e:	f000 ff47 	bl	80010e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000252:	f000 febd 	bl	8000fd0 <main>
  bx  lr    
 8000256:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000258:	20020000 	.word	0x20020000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 800025c:	0800115c 	.word	0x0800115c
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000260:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000264:	20000004 	.word	0x20000004
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8000268:	20000004 	.word	0x20000004
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800026c:	20000060 	.word	0x20000060

08000270 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000270:	e7fe      	b.n	8000270 <ADC_IRQHandler>
	...

08000274 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000274:	490f      	ldr	r1, [pc, #60]	; (80002b4 <SystemInit+0x40>)
 8000276:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800027a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800027e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000282:	4b0d      	ldr	r3, [pc, #52]	; (80002b8 <SystemInit+0x44>)
 8000284:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000286:	2000      	movs	r0, #0
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000288:	f042 0201 	orr.w	r2, r2, #1
 800028c:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800028e:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000290:	681a      	ldr	r2, [r3, #0]
 8000292:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000296:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800029a:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800029c:	4a07      	ldr	r2, [pc, #28]	; (80002bc <SystemInit+0x48>)
 800029e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80002a0:	681a      	ldr	r2, [r3, #0]
 80002a2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80002a6:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80002a8:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80002aa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80002ae:	608b      	str	r3, [r1, #8]
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
 80002b4:	e000ed00 	.word	0xe000ed00
 80002b8:	40023800 	.word	0x40023800
 80002bc:	24003010 	.word	0x24003010

080002c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80002c0:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 80002c2:	4b08      	ldr	r3, [pc, #32]	; (80002e4 <HAL_InitTick+0x24>)
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80002c4:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 80002c6:	6818      	ldr	r0, [r3, #0]
 80002c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002cc:	fbb0 f0f3 	udiv	r0, r0, r3
 80002d0:	f000 f884 	bl	80003dc <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 80002d4:	2200      	movs	r2, #0
 80002d6:	4621      	mov	r1, r4
 80002d8:	f04f 30ff 	mov.w	r0, #4294967295
 80002dc:	f000 f83e 	bl	800035c <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 80002e0:	2000      	movs	r0, #0
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	20000000 	.word	0x20000000

080002e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80002e8:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80002ea:	4b0b      	ldr	r3, [pc, #44]	; (8000318 <HAL_Init+0x30>)
 80002ec:	681a      	ldr	r2, [r3, #0]
 80002ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80002f2:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 80002f4:	681a      	ldr	r2, [r3, #0]
 80002f6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80002fa:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80002fc:	681a      	ldr	r2, [r3, #0]
 80002fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000302:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000304:	2003      	movs	r0, #3
 8000306:	f000 f817 	bl	8000338 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800030a:	2000      	movs	r0, #0
 800030c:	f7ff ffd8 	bl	80002c0 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000310:	f000 fe6a 	bl	8000fe8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 8000314:	2000      	movs	r0, #0
 8000316:	bd08      	pop	{r3, pc}
 8000318:	40023c00 	.word	0x40023c00

0800031c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 800031c:	4a02      	ldr	r2, [pc, #8]	; (8000328 <HAL_IncTick+0xc>)
 800031e:	6813      	ldr	r3, [r2, #0]
 8000320:	3301      	adds	r3, #1
 8000322:	6013      	str	r3, [r2, #0]
 8000324:	4770      	bx	lr
 8000326:	bf00      	nop
 8000328:	20000020 	.word	0x20000020

0800032c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800032c:	4b01      	ldr	r3, [pc, #4]	; (8000334 <HAL_GetTick+0x8>)
 800032e:	6818      	ldr	r0, [r3, #0]
}
 8000330:	4770      	bx	lr
 8000332:	bf00      	nop
 8000334:	20000020 	.word	0x20000020

08000338 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000338:	4a07      	ldr	r2, [pc, #28]	; (8000358 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800033a:	68d3      	ldr	r3, [r2, #12]
 800033c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000340:	041b      	lsls	r3, r3, #16
 8000342:	0c1b      	lsrs	r3, r3, #16
 8000344:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8000348:	0200      	lsls	r0, r0, #8
 800034a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800034e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8000352:	4303      	orrs	r3, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8000354:	60d3      	str	r3, [r2, #12]
 8000356:	4770      	bx	lr
 8000358:	e000ed00 	.word	0xe000ed00

0800035c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800035c:	4b17      	ldr	r3, [pc, #92]	; (80003bc <HAL_NVIC_SetPriority+0x60>)
 800035e:	68db      	ldr	r3, [r3, #12]
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000360:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000364:	b530      	push	{r4, r5, lr}
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000366:	f1c3 0407 	rsb	r4, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800036a:	1d1d      	adds	r5, r3, #4
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800036c:	2c04      	cmp	r4, #4
 800036e:	bf28      	it	cs
 8000370:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000372:	2d06      	cmp	r5, #6

  return (
 8000374:	f04f 0501 	mov.w	r5, #1
 8000378:	fa05 f404 	lsl.w	r4, r5, r4
 800037c:	f104 34ff 	add.w	r4, r4, #4294967295
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000380:	bf8c      	ite	hi
 8000382:	3b03      	subhi	r3, #3
 8000384:	2300      	movls	r3, #0

  return (
 8000386:	400c      	ands	r4, r1
 8000388:	409c      	lsls	r4, r3
 800038a:	fa05 f303 	lsl.w	r3, r5, r3
 800038e:	3b01      	subs	r3, #1
 8000390:	401a      	ands	r2, r3
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8000392:	2800      	cmp	r0, #0
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8000394:	ea42 0204 	orr.w	r2, r2, r4
 8000398:	ea4f 1202 	mov.w	r2, r2, lsl #4
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800039c:	bfaf      	iteee	ge
 800039e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003a2:	f000 000f 	andlt.w	r0, r0, #15
 80003a6:	4b06      	ldrlt	r3, [pc, #24]	; (80003c0 <HAL_NVIC_SetPriority+0x64>)
 80003a8:	b2d2      	uxtblt	r2, r2
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003aa:	bfa5      	ittet	ge
 80003ac:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80003b0:	b2d2      	uxtbge	r2, r2
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003b2:	541a      	strblt	r2, [r3, r0]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003b4:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	bf00      	nop
 80003bc:	e000ed00 	.word	0xe000ed00
 80003c0:	e000ed14 	.word	0xe000ed14

080003c4 <HAL_NVIC_EnableIRQ>:
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80003c4:	0942      	lsrs	r2, r0, #5
 80003c6:	2301      	movs	r3, #1
 80003c8:	f000 001f 	and.w	r0, r0, #31
 80003cc:	fa03 f000 	lsl.w	r0, r3, r0
 80003d0:	4b01      	ldr	r3, [pc, #4]	; (80003d8 <HAL_NVIC_EnableIRQ+0x14>)
 80003d2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80003d6:	4770      	bx	lr
 80003d8:	e000e100 	.word	0xe000e100

080003dc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80003dc:	3801      	subs	r0, #1
 80003de:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80003e2:	d20a      	bcs.n	80003fa <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003e4:	4b06      	ldr	r3, [pc, #24]	; (8000400 <HAL_SYSTICK_Config+0x24>)
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003e6:	4a07      	ldr	r2, [pc, #28]	; (8000404 <HAL_SYSTICK_Config+0x28>)
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003e8:	6058      	str	r0, [r3, #4]
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003ea:	21f0      	movs	r1, #240	; 0xf0
 80003ec:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003f0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003f2:	2207      	movs	r2, #7
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003f4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003f6:	601a      	str	r2, [r3, #0]
 80003f8:	4770      	bx	lr
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
 80003fa:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80003fc:	4770      	bx	lr
 80003fe:	bf00      	nop
 8000400:	e000e010 	.word	0xe000e010
 8000404:	e000ed00 	.word	0xe000ed00

08000408 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000408:	4b04      	ldr	r3, [pc, #16]	; (800041c <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800040a:	681a      	ldr	r2, [r3, #0]
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800040c:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800040e:	bf0c      	ite	eq
 8000410:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000414:	f022 0204 	bicne.w	r2, r2, #4
 8000418:	601a      	str	r2, [r3, #0]
 800041a:	4770      	bx	lr
 800041c:	e000e010 	.word	0xe000e010

08000420 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000420:	4770      	bx	lr

08000422 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000422:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000424:	f7ff fffc 	bl	8000420 <HAL_SYSTICK_Callback>
 8000428:	bd08      	pop	{r3, pc}
	...

0800042c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800042c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000430:	4f67      	ldr	r7, [pc, #412]	; (80005d0 <HAL_GPIO_Init+0x1a4>)
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000432:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000434:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 80005d8 <HAL_GPIO_Init+0x1ac>

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000438:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80005dc <HAL_GPIO_Init+0x1b0>
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800043c:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800043e:	2200      	movs	r2, #0
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000440:	9301      	str	r3, [sp, #4]
 8000442:	46be      	mov	lr, r7

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
 8000444:	2401      	movs	r4, #1
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if(iocurrent == ioposition)
 8000446:	9b01      	ldr	r3, [sp, #4]

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
 8000448:	4094      	lsls	r4, r2
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if(iocurrent == ioposition)
 800044a:	ea34 0303 	bics.w	r3, r4, r3
 800044e:	f040 80b7 	bne.w	80005c0 <HAL_GPIO_Init+0x194>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000452:	684d      	ldr	r5, [r1, #4]
 8000454:	f025 0a10 	bic.w	sl, r5, #16
 8000458:	f1ba 0f02 	cmp.w	sl, #2
 800045c:	d114      	bne.n	8000488 <HAL_GPIO_Init+0x5c>
 800045e:	ea4f 09d2 	mov.w	r9, r2, lsr #3
 8000462:	eb00 0989 	add.w	r9, r0, r9, lsl #2
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8000466:	f002 0b07 	and.w	fp, r2, #7
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800046a:	f8d9 6020 	ldr.w	r6, [r9, #32]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 800046e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000472:	230f      	movs	r3, #15
 8000474:	fa03 f30b 	lsl.w	r3, r3, fp
 8000478:	ea26 0603 	bic.w	r6, r6, r3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800047c:	690b      	ldr	r3, [r1, #16]
 800047e:	fa03 f30b 	lsl.w	r3, r3, fp
 8000482:	4333      	orrs	r3, r6
        GPIOx->AFR[position >> 3U] = temp;
 8000484:	f8c9 3020 	str.w	r3, [r9, #32]
 8000488:	ea4f 0b42 	mov.w	fp, r2, lsl #1
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800048c:	f04f 0903 	mov.w	r9, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000490:	6803      	ldr	r3, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000492:	fa09 f90b 	lsl.w	r9, r9, fp
 8000496:	ea6f 0909 	mvn.w	r9, r9
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800049a:	f005 0603 	and.w	r6, r5, #3
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800049e:	ea03 0309 	and.w	r3, r3, r9
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80004a2:	fa06 f60b 	lsl.w	r6, r6, fp
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80004a6:	f10a 3aff 	add.w	sl, sl, #4294967295
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80004aa:	4333      	orrs	r3, r6
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80004ac:	f1ba 0f01 	cmp.w	sl, #1

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
      GPIOx->MODER = temp;
 80004b0:	6003      	str	r3, [r0, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80004b2:	d80f      	bhi.n	80004d4 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80004b4:	6883      	ldr	r3, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
        temp |= (GPIO_Init->Speed << (position * 2U));
 80004b6:	68ce      	ldr	r6, [r1, #12]
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80004b8:	ea09 0303 	and.w	r3, r9, r3
        temp |= (GPIO_Init->Speed << (position * 2U));
 80004bc:	fa06 f60b 	lsl.w	r6, r6, fp
 80004c0:	431e      	orrs	r6, r3
        GPIOx->OSPEEDR = temp;
 80004c2:	6086      	str	r6, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80004c4:	6843      	ldr	r3, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80004c6:	f3c5 1600 	ubfx	r6, r5, #4, #1
        temp |= (GPIO_Init->Speed << (position * 2U));
        GPIOx->OSPEEDR = temp;

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80004ca:	ea23 0304 	bic.w	r3, r3, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80004ce:	4096      	lsls	r6, r2
 80004d0:	4333      	orrs	r3, r6
        GPIOx->OTYPER = temp;
 80004d2:	6043      	str	r3, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80004d4:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80004d6:	ea09 0903 	and.w	r9, r9, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80004da:	688b      	ldr	r3, [r1, #8]
 80004dc:	fa03 f30b 	lsl.w	r3, r3, fp
 80004e0:	ea43 0309 	orr.w	r3, r3, r9
      GPIOx->PUPDR = temp;
 80004e4:	60c3      	str	r3, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80004e6:	00eb      	lsls	r3, r5, #3
 80004e8:	d56a      	bpl.n	80005c0 <HAL_GPIO_Init+0x194>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004ea:	2300      	movs	r3, #0
 80004ec:	9303      	str	r3, [sp, #12]
 80004ee:	f8dc 6044 	ldr.w	r6, [ip, #68]	; 0x44

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80004f2:	4b38      	ldr	r3, [pc, #224]	; (80005d4 <HAL_GPIO_Init+0x1a8>)
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004f4:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 80004f8:	f8cc 6044 	str.w	r6, [ip, #68]	; 0x44
 80004fc:	f8dc 6044 	ldr.w	r6, [ip, #68]	; 0x44
 8000500:	f022 0903 	bic.w	r9, r2, #3
 8000504:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
 8000508:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 800050c:	f509 399c 	add.w	r9, r9, #79872	; 0x13800
 8000510:	9603      	str	r6, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000512:	f002 0a03 	and.w	sl, r2, #3
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000516:	9e03      	ldr	r6, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000518:	f8d9 b008 	ldr.w	fp, [r9, #8]
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 800051c:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8000520:	260f      	movs	r6, #15
 8000522:	fa06 f60a 	lsl.w	r6, r6, sl
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000526:	4298      	cmp	r0, r3
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000528:	ea2b 0606 	bic.w	r6, fp, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800052c:	d018      	beq.n	8000560 <HAL_GPIO_Init+0x134>
 800052e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000532:	4298      	cmp	r0, r3
 8000534:	d016      	beq.n	8000564 <HAL_GPIO_Init+0x138>
 8000536:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800053a:	4298      	cmp	r0, r3
 800053c:	d014      	beq.n	8000568 <HAL_GPIO_Init+0x13c>
 800053e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000542:	4298      	cmp	r0, r3
 8000544:	d012      	beq.n	800056c <HAL_GPIO_Init+0x140>
 8000546:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800054a:	4298      	cmp	r0, r3
 800054c:	d010      	beq.n	8000570 <HAL_GPIO_Init+0x144>
 800054e:	4540      	cmp	r0, r8
 8000550:	d010      	beq.n	8000574 <HAL_GPIO_Init+0x148>
 8000552:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000556:	4298      	cmp	r0, r3
 8000558:	bf14      	ite	ne
 800055a:	2308      	movne	r3, #8
 800055c:	2306      	moveq	r3, #6
 800055e:	e00a      	b.n	8000576 <HAL_GPIO_Init+0x14a>
 8000560:	2300      	movs	r3, #0
 8000562:	e008      	b.n	8000576 <HAL_GPIO_Init+0x14a>
 8000564:	2301      	movs	r3, #1
 8000566:	e006      	b.n	8000576 <HAL_GPIO_Init+0x14a>
 8000568:	2302      	movs	r3, #2
 800056a:	e004      	b.n	8000576 <HAL_GPIO_Init+0x14a>
 800056c:	2303      	movs	r3, #3
 800056e:	e002      	b.n	8000576 <HAL_GPIO_Init+0x14a>
 8000570:	2304      	movs	r3, #4
 8000572:	e000      	b.n	8000576 <HAL_GPIO_Init+0x14a>
 8000574:	2305      	movs	r3, #5
 8000576:	fa03 f30a 	lsl.w	r3, r3, sl
 800057a:	4333      	orrs	r3, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 800057c:	f8c9 3008 	str.w	r3, [r9, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000580:	683b      	ldr	r3, [r7, #0]
        temp &= ~((uint32_t)iocurrent);
 8000582:	43e6      	mvns	r6, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000584:	f415 3f80 	tst.w	r5, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
 8000588:	bf0c      	ite	eq
 800058a:	4033      	andeq	r3, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
 800058c:	4323      	orrne	r3, r4
        }
        EXTI->IMR = temp;
 800058e:	f8ce 3000 	str.w	r3, [lr]

        temp = EXTI->EMR;
 8000592:	f8de 3004 	ldr.w	r3, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000596:	f415 3f00 	tst.w	r5, #131072	; 0x20000
          temp |= iocurrent;
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
 800059a:	bf0c      	ite	eq
 800059c:	4033      	andeq	r3, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
 800059e:	4323      	orrne	r3, r4
        }
        EXTI->EMR = temp;
 80005a0:	607b      	str	r3, [r7, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80005a2:	68bb      	ldr	r3, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80005a4:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
        }
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
 80005a8:	bf0c      	ite	eq
 80005aa:	4033      	andeq	r3, r6
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
 80005ac:	4323      	orrne	r3, r4
        }
        EXTI->RTSR = temp;
 80005ae:	f8ce 3008 	str.w	r3, [lr, #8]

        temp = EXTI->FTSR;
 80005b2:	f8de 300c 	ldr.w	r3, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80005b6:	02ad      	lsls	r5, r5, #10
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
 80005b8:	bf54      	ite	pl
 80005ba:	4033      	andpl	r3, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          temp |= iocurrent;
 80005bc:	4323      	orrmi	r3, r4
        }
        EXTI->FTSR = temp;
 80005be:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80005c0:	3201      	adds	r2, #1
 80005c2:	2a10      	cmp	r2, #16
 80005c4:	f47f af3e 	bne.w	8000444 <HAL_GPIO_Init+0x18>
        }
        EXTI->FTSR = temp;
      }
    }
  }
}
 80005c8:	b005      	add	sp, #20
 80005ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80005ce:	bf00      	nop
 80005d0:	40013c00 	.word	0x40013c00
 80005d4:	40020000 	.word	0x40020000
 80005d8:	40023800 	.word	0x40023800
 80005dc:	40021400 	.word	0x40021400

080005e0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80005e0:	b902      	cbnz	r2, 80005e4 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80005e2:	0409      	lsls	r1, r1, #16
 80005e4:	6181      	str	r1, [r0, #24]
 80005e6:	4770      	bx	lr

080005e8 <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80005e8:	4b55      	ldr	r3, [pc, #340]	; (8000740 <HAL_RCC_ClockConfig+0x158>)
 80005ea:	681a      	ldr	r2, [r3, #0]
 80005ec:	f002 020f 	and.w	r2, r2, #15
 80005f0:	428a      	cmp	r2, r1
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80005f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80005f6:	4605      	mov	r5, r0
 80005f8:	460e      	mov	r6, r1
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80005fa:	d30a      	bcc.n	8000612 <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
    }
  }
 
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80005fc:	6829      	ldr	r1, [r5, #0]
 80005fe:	0788      	lsls	r0, r1, #30
 8000600:	d511      	bpl.n	8000626 <HAL_RCC_ClockConfig+0x3e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000602:	4850      	ldr	r0, [pc, #320]	; (8000744 <HAL_RCC_ClockConfig+0x15c>)
 8000604:	6883      	ldr	r3, [r0, #8]
 8000606:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800060a:	68ab      	ldr	r3, [r5, #8]
 800060c:	4313      	orrs	r3, r2
 800060e:	6083      	str	r3, [r0, #8]
 8000610:	e009      	b.n	8000626 <HAL_RCC_ClockConfig+0x3e>
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000612:	b2ca      	uxtb	r2, r1
 8000614:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	f003 030f 	and.w	r3, r3, #15
 800061c:	4299      	cmp	r1, r3
 800061e:	d0ed      	beq.n	80005fc <HAL_RCC_ClockConfig+0x14>
    {
      return HAL_ERROR;
 8000620:	2001      	movs	r0, #1
 8000622:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }
  
  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000626:	07c9      	lsls	r1, r1, #31
 8000628:	d406      	bmi.n	8000638 <HAL_RCC_ClockConfig+0x50>
      }
    }
  }    
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800062a:	4b45      	ldr	r3, [pc, #276]	; (8000740 <HAL_RCC_ClockConfig+0x158>)
 800062c:	681a      	ldr	r2, [r3, #0]
 800062e:	f002 020f 	and.w	r2, r2, #15
 8000632:	4296      	cmp	r6, r2
 8000634:	d351      	bcc.n	80006da <HAL_RCC_ClockConfig+0xf2>
 8000636:	e057      	b.n	80006e8 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000638:	686b      	ldr	r3, [r5, #4]
 800063a:	4a42      	ldr	r2, [pc, #264]	; (8000744 <HAL_RCC_ClockConfig+0x15c>)
 800063c:	2b01      	cmp	r3, #1
 800063e:	d103      	bne.n	8000648 <HAL_RCC_ClockConfig+0x60>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000640:	6812      	ldr	r2, [r2, #0]
 8000642:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8000646:	e008      	b.n	800065a <HAL_RCC_ClockConfig+0x72>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8000648:	1e99      	subs	r1, r3, #2
 800064a:	2901      	cmp	r1, #1
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800064c:	6812      	ldr	r2, [r2, #0]
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 800064e:	d802      	bhi.n	8000656 <HAL_RCC_ClockConfig+0x6e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000650:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8000654:	e001      	b.n	800065a <HAL_RCC_ClockConfig+0x72>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000656:	f012 0f02 	tst.w	r2, #2
 800065a:	d0e1      	beq.n	8000620 <HAL_RCC_ClockConfig+0x38>
      {
        return HAL_ERROR;
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800065c:	4c39      	ldr	r4, [pc, #228]	; (8000744 <HAL_RCC_ClockConfig+0x15c>)
 800065e:	68a2      	ldr	r2, [r4, #8]
 8000660:	f022 0203 	bic.w	r2, r2, #3
 8000664:	4313      	orrs	r3, r2
 8000666:	60a3      	str	r3, [r4, #8]
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8000668:	f7ff fe60 	bl	800032c <HAL_GetTick>
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800066c:	686b      	ldr	r3, [r5, #4]
 800066e:	2b01      	cmp	r3, #1
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8000670:	4607      	mov	r7, r0
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000672:	f241 3888 	movw	r8, #5000	; 0x1388
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000676:	d10c      	bne.n	8000692 <HAL_RCC_ClockConfig+0xaa>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000678:	68a3      	ldr	r3, [r4, #8]
 800067a:	f003 030c 	and.w	r3, r3, #12
 800067e:	2b04      	cmp	r3, #4
 8000680:	d0d3      	beq.n	800062a <HAL_RCC_ClockConfig+0x42>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000682:	f7ff fe53 	bl	800032c <HAL_GetTick>
 8000686:	1bc0      	subs	r0, r0, r7
 8000688:	4540      	cmp	r0, r8
 800068a:	d9f5      	bls.n	8000678 <HAL_RCC_ClockConfig+0x90>
        {
          return HAL_TIMEOUT;
 800068c:	2003      	movs	r0, #3
 800068e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000692:	2b02      	cmp	r3, #2
 8000694:	d10a      	bne.n	80006ac <HAL_RCC_ClockConfig+0xc4>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000696:	68a3      	ldr	r3, [r4, #8]
 8000698:	f003 030c 	and.w	r3, r3, #12
 800069c:	2b08      	cmp	r3, #8
 800069e:	d0c4      	beq.n	800062a <HAL_RCC_ClockConfig+0x42>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80006a0:	f7ff fe44 	bl	800032c <HAL_GetTick>
 80006a4:	1bc0      	subs	r0, r0, r7
 80006a6:	4540      	cmp	r0, r8
 80006a8:	d9f5      	bls.n	8000696 <HAL_RCC_ClockConfig+0xae>
 80006aa:	e7ef      	b.n	800068c <HAL_RCC_ClockConfig+0xa4>
        {
          return HAL_TIMEOUT;
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 80006ac:	2b03      	cmp	r3, #3
 80006ae:	d10f      	bne.n	80006d0 <HAL_RCC_ClockConfig+0xe8>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 80006b0:	68a3      	ldr	r3, [r4, #8]
 80006b2:	f003 030c 	and.w	r3, r3, #12
 80006b6:	2b0c      	cmp	r3, #12
 80006b8:	d0b7      	beq.n	800062a <HAL_RCC_ClockConfig+0x42>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80006ba:	f7ff fe37 	bl	800032c <HAL_GetTick>
 80006be:	1bc0      	subs	r0, r0, r7
 80006c0:	4540      	cmp	r0, r8
 80006c2:	d9f5      	bls.n	80006b0 <HAL_RCC_ClockConfig+0xc8>
 80006c4:	e7e2      	b.n	800068c <HAL_RCC_ClockConfig+0xa4>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80006c6:	f7ff fe31 	bl	800032c <HAL_GetTick>
 80006ca:	1bc0      	subs	r0, r0, r7
 80006cc:	4540      	cmp	r0, r8
 80006ce:	d8dd      	bhi.n	800068c <HAL_RCC_ClockConfig+0xa4>
        }
      }
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80006d0:	68a3      	ldr	r3, [r4, #8]
 80006d2:	f013 0f0c 	tst.w	r3, #12
 80006d6:	d1f6      	bne.n	80006c6 <HAL_RCC_ClockConfig+0xde>
 80006d8:	e7a7      	b.n	800062a <HAL_RCC_ClockConfig+0x42>
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
  { 
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80006da:	b2f2      	uxtb	r2, r6
 80006dc:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	f003 030f 	and.w	r3, r3, #15
 80006e4:	429e      	cmp	r6, r3
 80006e6:	d19b      	bne.n	8000620 <HAL_RCC_ClockConfig+0x38>
      return HAL_ERROR;
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80006e8:	6829      	ldr	r1, [r5, #0]
 80006ea:	074a      	lsls	r2, r1, #29
 80006ec:	d506      	bpl.n	80006fc <HAL_RCC_ClockConfig+0x114>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80006ee:	4815      	ldr	r0, [pc, #84]	; (8000744 <HAL_RCC_ClockConfig+0x15c>)
 80006f0:	6883      	ldr	r3, [r0, #8]
 80006f2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80006f6:	68eb      	ldr	r3, [r5, #12]
 80006f8:	4313      	orrs	r3, r2
 80006fa:	6083      	str	r3, [r0, #8]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80006fc:	070b      	lsls	r3, r1, #28
 80006fe:	d507      	bpl.n	8000710 <HAL_RCC_ClockConfig+0x128>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000700:	4a10      	ldr	r2, [pc, #64]	; (8000744 <HAL_RCC_ClockConfig+0x15c>)
 8000702:	6929      	ldr	r1, [r5, #16]
 8000704:	6893      	ldr	r3, [r2, #8]
 8000706:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800070a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800070e:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8000710:	f000 f9a6 	bl	8000a60 <HAL_RCC_GetSysClockFreq>
 8000714:	4b0b      	ldr	r3, [pc, #44]	; (8000744 <HAL_RCC_ClockConfig+0x15c>)
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000716:	22f0      	movs	r2, #240	; 0xf0
 8000718:	689b      	ldr	r3, [r3, #8]
 800071a:	fa92 f2a2 	rbit	r2, r2
 800071e:	fab2 f282 	clz	r2, r2
 8000722:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000726:	40d3      	lsrs	r3, r2
 8000728:	4a07      	ldr	r2, [pc, #28]	; (8000748 <HAL_RCC_ClockConfig+0x160>)
 800072a:	5cd3      	ldrb	r3, [r2, r3]
 800072c:	40d8      	lsrs	r0, r3
 800072e:	4b07      	ldr	r3, [pc, #28]	; (800074c <HAL_RCC_ClockConfig+0x164>)
 8000730:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8000732:	2000      	movs	r0, #0
 8000734:	f7ff fdc4 	bl	80002c0 <HAL_InitTick>
  
  return HAL_OK;
 8000738:	2000      	movs	r0, #0
}
 800073a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800073e:	bf00      	nop
 8000740:	40023c00 	.word	0x40023c00
 8000744:	40023800 	.word	0x40023800
 8000748:	08001144 	.word	0x08001144
 800074c:	20000000 	.word	0x20000000

08000750 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8000750:	4b01      	ldr	r3, [pc, #4]	; (8000758 <HAL_RCC_GetHCLKFreq+0x8>)
 8000752:	6818      	ldr	r0, [r3, #0]
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop
 8000758:	20000000 	.word	0x20000000

0800075c <HAL_RCC_OscConfig>:
  uint32_t tickstart = 0U;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800075c:	6803      	ldr	r3, [r0, #0]
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature 
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800075e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart = 0U;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000762:	07de      	lsls	r6, r3, #31
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature 
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000764:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000766:	d403      	bmi.n	8000770 <HAL_RCC_OscConfig+0x14>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000768:	6823      	ldr	r3, [r4, #0]
 800076a:	079d      	lsls	r5, r3, #30
 800076c:	d440      	bmi.n	80007f0 <HAL_RCC_OscConfig+0x94>
 800076e:	e099      	b.n	80008a4 <HAL_RCC_OscConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8000770:	4ba6      	ldr	r3, [pc, #664]	; (8000a0c <HAL_RCC_OscConfig+0x2b0>)
 8000772:	689a      	ldr	r2, [r3, #8]
 8000774:	f002 020c 	and.w	r2, r2, #12
 8000778:	2a04      	cmp	r2, #4
 800077a:	d010      	beq.n	800079e <HAL_RCC_OscConfig+0x42>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800077c:	689a      	ldr	r2, [r3, #8]
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800077e:	f002 020c 	and.w	r2, r2, #12
 8000782:	2a08      	cmp	r2, #8
 8000784:	d102      	bne.n	800078c <HAL_RCC_OscConfig+0x30>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8000786:	685b      	ldr	r3, [r3, #4]
 8000788:	0258      	lsls	r0, r3, #9
 800078a:	d408      	bmi.n	800079e <HAL_RCC_OscConfig+0x42>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800078c:	4a9f      	ldr	r2, [pc, #636]	; (8000a0c <HAL_RCC_OscConfig+0x2b0>)
 800078e:	6893      	ldr	r3, [r2, #8]
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8000790:	f003 030c 	and.w	r3, r3, #12
 8000794:	2b0c      	cmp	r3, #12
 8000796:	d10b      	bne.n	80007b0 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000798:	6853      	ldr	r3, [r2, #4]
 800079a:	0259      	lsls	r1, r3, #9
 800079c:	d508      	bpl.n	80007b0 <HAL_RCC_OscConfig+0x54>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800079e:	4b9b      	ldr	r3, [pc, #620]	; (8000a0c <HAL_RCC_OscConfig+0x2b0>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	039a      	lsls	r2, r3, #14
 80007a4:	d5e0      	bpl.n	8000768 <HAL_RCC_OscConfig+0xc>
 80007a6:	6863      	ldr	r3, [r4, #4]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d1dd      	bne.n	8000768 <HAL_RCC_OscConfig+0xc>
      {
        return HAL_ERROR;
 80007ac:	2001      	movs	r0, #1
 80007ae:	e154      	b.n	8000a5a <HAL_RCC_OscConfig+0x2fe>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80007b0:	4b97      	ldr	r3, [pc, #604]	; (8000a10 <HAL_RCC_OscConfig+0x2b4>)
 80007b2:	7922      	ldrb	r2, [r4, #4]
 80007b4:	701a      	strb	r2, [r3, #0]
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80007b6:	6863      	ldr	r3, [r4, #4]
 80007b8:	b16b      	cbz	r3, 80007d6 <HAL_RCC_OscConfig+0x7a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80007ba:	f7ff fdb7 	bl	800032c <HAL_GetTick>
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80007be:	4d93      	ldr	r5, [pc, #588]	; (8000a0c <HAL_RCC_OscConfig+0x2b0>)
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80007c0:	4606      	mov	r6, r0
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80007c2:	682b      	ldr	r3, [r5, #0]
 80007c4:	039b      	lsls	r3, r3, #14
 80007c6:	d4cf      	bmi.n	8000768 <HAL_RCC_OscConfig+0xc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80007c8:	f7ff fdb0 	bl	800032c <HAL_GetTick>
 80007cc:	1b80      	subs	r0, r0, r6
 80007ce:	2864      	cmp	r0, #100	; 0x64
 80007d0:	d9f7      	bls.n	80007c2 <HAL_RCC_OscConfig+0x66>
          {
            return HAL_TIMEOUT;
 80007d2:	2003      	movs	r0, #3
 80007d4:	e141      	b.n	8000a5a <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80007d6:	f7ff fda9 	bl	800032c <HAL_GetTick>

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80007da:	4d8c      	ldr	r5, [pc, #560]	; (8000a0c <HAL_RCC_OscConfig+0x2b0>)
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80007dc:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80007de:	682b      	ldr	r3, [r5, #0]
 80007e0:	039f      	lsls	r7, r3, #14
 80007e2:	d5c1      	bpl.n	8000768 <HAL_RCC_OscConfig+0xc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80007e4:	f7ff fda2 	bl	800032c <HAL_GetTick>
 80007e8:	1b80      	subs	r0, r0, r6
 80007ea:	2864      	cmp	r0, #100	; 0x64
 80007ec:	d9f7      	bls.n	80007de <HAL_RCC_OscConfig+0x82>
 80007ee:	e7f0      	b.n	80007d2 <HAL_RCC_OscConfig+0x76>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80007f0:	4b86      	ldr	r3, [pc, #536]	; (8000a0c <HAL_RCC_OscConfig+0x2b0>)
 80007f2:	689a      	ldr	r2, [r3, #8]
 80007f4:	f012 0f0c 	tst.w	r2, #12
 80007f8:	d010      	beq.n	800081c <HAL_RCC_OscConfig+0xc0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80007fa:	689a      	ldr	r2, [r3, #8]
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80007fc:	f002 020c 	and.w	r2, r2, #12
 8000800:	2a08      	cmp	r2, #8
 8000802:	d102      	bne.n	800080a <HAL_RCC_OscConfig+0xae>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8000804:	685b      	ldr	r3, [r3, #4]
 8000806:	0258      	lsls	r0, r3, #9
 8000808:	d508      	bpl.n	800081c <HAL_RCC_OscConfig+0xc0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800080a:	4a80      	ldr	r2, [pc, #512]	; (8000a0c <HAL_RCC_OscConfig+0x2b0>)
 800080c:	6893      	ldr	r3, [r2, #8]
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800080e:	f003 030c 	and.w	r3, r3, #12
 8000812:	2b0c      	cmp	r3, #12
 8000814:	d117      	bne.n	8000846 <HAL_RCC_OscConfig+0xea>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000816:	6853      	ldr	r3, [r2, #4]
 8000818:	0259      	lsls	r1, r3, #9
 800081a:	d414      	bmi.n	8000846 <HAL_RCC_OscConfig+0xea>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800081c:	4b7b      	ldr	r3, [pc, #492]	; (8000a0c <HAL_RCC_OscConfig+0x2b0>)
 800081e:	681a      	ldr	r2, [r3, #0]
 8000820:	0792      	lsls	r2, r2, #30
 8000822:	d502      	bpl.n	800082a <HAL_RCC_OscConfig+0xce>
 8000824:	68e2      	ldr	r2, [r4, #12]
 8000826:	2a01      	cmp	r2, #1
 8000828:	d1c0      	bne.n	80007ac <HAL_RCC_OscConfig+0x50>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800082a:	681a      	ldr	r2, [r3, #0]
 800082c:	21f8      	movs	r1, #248	; 0xf8
 800082e:	fa91 f1a1 	rbit	r1, r1
 8000832:	6920      	ldr	r0, [r4, #16]
 8000834:	fab1 f181 	clz	r1, r1
 8000838:	fa00 f101 	lsl.w	r1, r0, r1
 800083c:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000840:	430a      	orrs	r2, r1
 8000842:	601a      	str	r2, [r3, #0]
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000844:	e02e      	b.n	80008a4 <HAL_RCC_OscConfig+0x148>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000846:	68e2      	ldr	r2, [r4, #12]
 8000848:	4b72      	ldr	r3, [pc, #456]	; (8000a14 <HAL_RCC_OscConfig+0x2b8>)
 800084a:	b1ea      	cbz	r2, 8000888 <HAL_RCC_OscConfig+0x12c>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800084c:	2201      	movs	r2, #1
 800084e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000850:	f7ff fd6c 	bl	800032c <HAL_GetTick>

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000854:	4d6d      	ldr	r5, [pc, #436]	; (8000a0c <HAL_RCC_OscConfig+0x2b0>)
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000856:	4606      	mov	r6, r0

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000858:	682b      	ldr	r3, [r5, #0]
 800085a:	486c      	ldr	r0, [pc, #432]	; (8000a0c <HAL_RCC_OscConfig+0x2b0>)
 800085c:	079b      	lsls	r3, r3, #30
 800085e:	d405      	bmi.n	800086c <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000860:	f7ff fd64 	bl	800032c <HAL_GetTick>
 8000864:	1b80      	subs	r0, r0, r6
 8000866:	2802      	cmp	r0, #2
 8000868:	d9f6      	bls.n	8000858 <HAL_RCC_OscConfig+0xfc>
 800086a:	e7b2      	b.n	80007d2 <HAL_RCC_OscConfig+0x76>
            return HAL_TIMEOUT;
          }       
        } 
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800086c:	6803      	ldr	r3, [r0, #0]
 800086e:	22f8      	movs	r2, #248	; 0xf8
 8000870:	fa92 f2a2 	rbit	r2, r2
 8000874:	6921      	ldr	r1, [r4, #16]
 8000876:	fab2 f282 	clz	r2, r2
 800087a:	fa01 f202 	lsl.w	r2, r1, r2
 800087e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000882:	4313      	orrs	r3, r2
 8000884:	6003      	str	r3, [r0, #0]
 8000886:	e00d      	b.n	80008a4 <HAL_RCC_OscConfig+0x148>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000888:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800088a:	f7ff fd4f 	bl	800032c <HAL_GetTick>
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800088e:	4d5f      	ldr	r5, [pc, #380]	; (8000a0c <HAL_RCC_OscConfig+0x2b0>)
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000890:	4606      	mov	r6, r0
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000892:	682b      	ldr	r3, [r5, #0]
 8000894:	079f      	lsls	r7, r3, #30
 8000896:	d505      	bpl.n	80008a4 <HAL_RCC_OscConfig+0x148>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000898:	f7ff fd48 	bl	800032c <HAL_GetTick>
 800089c:	1b80      	subs	r0, r0, r6
 800089e:	2802      	cmp	r0, #2
 80008a0:	d9f7      	bls.n	8000892 <HAL_RCC_OscConfig+0x136>
 80008a2:	e796      	b.n	80007d2 <HAL_RCC_OscConfig+0x76>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80008a4:	6823      	ldr	r3, [r4, #0]
 80008a6:	071e      	lsls	r6, r3, #28
 80008a8:	d403      	bmi.n	80008b2 <HAL_RCC_OscConfig+0x156>
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80008aa:	6823      	ldr	r3, [r4, #0]
 80008ac:	075d      	lsls	r5, r3, #29
 80008ae:	d545      	bpl.n	800093c <HAL_RCC_OscConfig+0x1e0>
 80008b0:	e01f      	b.n	80008f2 <HAL_RCC_OscConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80008b2:	6962      	ldr	r2, [r4, #20]
 80008b4:	4b58      	ldr	r3, [pc, #352]	; (8000a18 <HAL_RCC_OscConfig+0x2bc>)
 80008b6:	b172      	cbz	r2, 80008d6 <HAL_RCC_OscConfig+0x17a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80008b8:	2201      	movs	r2, #1
 80008ba:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80008bc:	f7ff fd36 	bl	800032c <HAL_GetTick>
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80008c0:	4d52      	ldr	r5, [pc, #328]	; (8000a0c <HAL_RCC_OscConfig+0x2b0>)
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80008c2:	4606      	mov	r6, r0
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80008c4:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80008c6:	0798      	lsls	r0, r3, #30
 80008c8:	d4ef      	bmi.n	80008aa <HAL_RCC_OscConfig+0x14e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80008ca:	f7ff fd2f 	bl	800032c <HAL_GetTick>
 80008ce:	1b80      	subs	r0, r0, r6
 80008d0:	2802      	cmp	r0, #2
 80008d2:	d9f7      	bls.n	80008c4 <HAL_RCC_OscConfig+0x168>
 80008d4:	e77d      	b.n	80007d2 <HAL_RCC_OscConfig+0x76>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80008d6:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80008d8:	f7ff fd28 	bl	800032c <HAL_GetTick>
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80008dc:	4d4b      	ldr	r5, [pc, #300]	; (8000a0c <HAL_RCC_OscConfig+0x2b0>)
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80008de:	4606      	mov	r6, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80008e0:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80008e2:	0799      	lsls	r1, r3, #30
 80008e4:	d5e1      	bpl.n	80008aa <HAL_RCC_OscConfig+0x14e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80008e6:	f7ff fd21 	bl	800032c <HAL_GetTick>
 80008ea:	1b80      	subs	r0, r0, r6
 80008ec:	2802      	cmp	r0, #2
 80008ee:	d9f7      	bls.n	80008e0 <HAL_RCC_OscConfig+0x184>
 80008f0:	e76f      	b.n	80007d2 <HAL_RCC_OscConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	9301      	str	r3, [sp, #4]
 80008f6:	4b45      	ldr	r3, [pc, #276]	; (8000a0c <HAL_RCC_OscConfig+0x2b0>)
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80008f8:	4d48      	ldr	r5, [pc, #288]	; (8000a1c <HAL_RCC_OscConfig+0x2c0>)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80008fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008fc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000900:	641a      	str	r2, [r3, #64]	; 0x40
 8000902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000904:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000908:	9301      	str	r3, [sp, #4]
 800090a:	9b01      	ldr	r3, [sp, #4]
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800090c:	682b      	ldr	r3, [r5, #0]
 800090e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000912:	602b      	str	r3, [r5, #0]
    
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8000914:	f7ff fd0a 	bl	800032c <HAL_GetTick>
 8000918:	4606      	mov	r6, r0
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800091a:	682b      	ldr	r3, [r5, #0]
 800091c:	05da      	lsls	r2, r3, #23
 800091e:	d510      	bpl.n	8000942 <HAL_RCC_OscConfig+0x1e6>
        return HAL_TIMEOUT;
      }
    }
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000920:	4b3f      	ldr	r3, [pc, #252]	; (8000a20 <HAL_RCC_OscConfig+0x2c4>)
 8000922:	7a22      	ldrb	r2, [r4, #8]
 8000924:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000926:	68a3      	ldr	r3, [r4, #8]
 8000928:	b1bb      	cbz	r3, 800095a <HAL_RCC_OscConfig+0x1fe>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800092a:	f7ff fcff 	bl	800032c <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800092e:	4d37      	ldr	r5, [pc, #220]	; (8000a0c <HAL_RCC_OscConfig+0x2b0>)
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000930:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000932:	f241 3788 	movw	r7, #5000	; 0x1388
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000936:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000938:	079b      	lsls	r3, r3, #30
 800093a:	d508      	bpl.n	800094e <HAL_RCC_OscConfig+0x1f2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800093c:	69a2      	ldr	r2, [r4, #24]
 800093e:	b9da      	cbnz	r2, 8000978 <HAL_RCC_OscConfig+0x21c>
 8000940:	e062      	b.n	8000a08 <HAL_RCC_OscConfig+0x2ac>
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8000942:	f7ff fcf3 	bl	800032c <HAL_GetTick>
 8000946:	1b80      	subs	r0, r0, r6
 8000948:	2802      	cmp	r0, #2
 800094a:	d9e6      	bls.n	800091a <HAL_RCC_OscConfig+0x1be>
 800094c:	e741      	b.n	80007d2 <HAL_RCC_OscConfig+0x76>
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800094e:	f7ff fced 	bl	800032c <HAL_GetTick>
 8000952:	1b80      	subs	r0, r0, r6
 8000954:	42b8      	cmp	r0, r7
 8000956:	d9ee      	bls.n	8000936 <HAL_RCC_OscConfig+0x1da>
 8000958:	e73b      	b.n	80007d2 <HAL_RCC_OscConfig+0x76>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800095a:	f7ff fce7 	bl	800032c <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800095e:	4d2b      	ldr	r5, [pc, #172]	; (8000a0c <HAL_RCC_OscConfig+0x2b0>)
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000960:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000962:	f241 3788 	movw	r7, #5000	; 0x1388
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000966:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000968:	0798      	lsls	r0, r3, #30
 800096a:	d5e7      	bpl.n	800093c <HAL_RCC_OscConfig+0x1e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800096c:	f7ff fcde 	bl	800032c <HAL_GetTick>
 8000970:	1b80      	subs	r0, r0, r6
 8000972:	42b8      	cmp	r0, r7
 8000974:	d9f7      	bls.n	8000966 <HAL_RCC_OscConfig+0x20a>
 8000976:	e72c      	b.n	80007d2 <HAL_RCC_OscConfig+0x76>
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000978:	4d24      	ldr	r5, [pc, #144]	; (8000a0c <HAL_RCC_OscConfig+0x2b0>)
 800097a:	68ab      	ldr	r3, [r5, #8]
 800097c:	f003 030c 	and.w	r3, r3, #12
 8000980:	2b08      	cmp	r3, #8
 8000982:	f43f af13 	beq.w	80007ac <HAL_RCC_OscConfig+0x50>
 8000986:	4e27      	ldr	r6, [pc, #156]	; (8000a24 <HAL_RCC_OscConfig+0x2c8>)
 8000988:	2300      	movs	r3, #0
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800098a:	2a02      	cmp	r2, #2
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800098c:	6033      	str	r3, [r6, #0]
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800098e:	d158      	bne.n	8000a42 <HAL_RCC_OscConfig+0x2e6>
      
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000990:	f7ff fccc 	bl	800032c <HAL_GetTick>
 8000994:	4680      	mov	r8, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000996:	682b      	ldr	r3, [r5, #0]
 8000998:	4f1c      	ldr	r7, [pc, #112]	; (8000a0c <HAL_RCC_OscConfig+0x2b0>)
 800099a:	0199      	lsls	r1, r3, #6
 800099c:	d444      	bmi.n	8000a28 <HAL_RCC_OscConfig+0x2cc>
 800099e:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 80009a2:	fa92 f2a2 	rbit	r2, r2
 80009a6:	f44f 3340 	mov.w	r3, #196608	; 0x30000
            return HAL_TIMEOUT;
          }
        }        

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80009aa:	fab2 fc82 	clz	ip, r2
 80009ae:	fa93 f3a3 	rbit	r3, r3
 80009b2:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 80009b6:	fab3 fe83 	clz	lr, r3
 80009ba:	fa91 f1a1 	rbit	r1, r1
 80009be:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 80009c2:	fab1 f581 	clz	r5, r1
 80009c6:	fa92 f2a2 	rbit	r2, r2
 80009ca:	69e3      	ldr	r3, [r4, #28]
 80009cc:	fab2 f082 	clz	r0, r2
 80009d0:	6a22      	ldr	r2, [r4, #32]
 80009d2:	ea43 0102 	orr.w	r1, r3, r2
 80009d6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80009d8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80009da:	fa02 f20c 	lsl.w	r2, r2, ip
 80009de:	4311      	orrs	r1, r2
 80009e0:	085a      	lsrs	r2, r3, #1
 80009e2:	3a01      	subs	r2, #1
 80009e4:	fa02 f30e 	lsl.w	r3, r2, lr
 80009e8:	430b      	orrs	r3, r1
 80009ea:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80009ec:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80009ee:	40a9      	lsls	r1, r5
 80009f0:	430b      	orrs	r3, r1
 80009f2:	4082      	lsls	r2, r0
 80009f4:	4313      	orrs	r3, r2
 80009f6:	607b      	str	r3, [r7, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80009f8:	2301      	movs	r3, #1
 80009fa:	6033      	str	r3, [r6, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80009fc:	f7ff fc96 	bl	800032c <HAL_GetTick>
 8000a00:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	019a      	lsls	r2, r3, #6
 8000a06:	d516      	bpl.n	8000a36 <HAL_RCC_OscConfig+0x2da>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8000a08:	2000      	movs	r0, #0
 8000a0a:	e026      	b.n	8000a5a <HAL_RCC_OscConfig+0x2fe>
 8000a0c:	40023800 	.word	0x40023800
 8000a10:	40023802 	.word	0x40023802
 8000a14:	42470000 	.word	0x42470000
 8000a18:	42470e80 	.word	0x42470e80
 8000a1c:	40007000 	.word	0x40007000
 8000a20:	40023870 	.word	0x40023870
 8000a24:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000a28:	f7ff fc80 	bl	800032c <HAL_GetTick>
 8000a2c:	ebc8 0000 	rsb	r0, r8, r0
 8000a30:	2802      	cmp	r0, #2
 8000a32:	d9b0      	bls.n	8000996 <HAL_RCC_OscConfig+0x23a>
 8000a34:	e6cd      	b.n	80007d2 <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000a36:	f7ff fc79 	bl	800032c <HAL_GetTick>
 8000a3a:	1b00      	subs	r0, r0, r4
 8000a3c:	2802      	cmp	r0, #2
 8000a3e:	d9e0      	bls.n	8000a02 <HAL_RCC_OscConfig+0x2a6>
 8000a40:	e6c7      	b.n	80007d2 <HAL_RCC_OscConfig+0x76>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000a42:	f7ff fc73 	bl	800032c <HAL_GetTick>
 8000a46:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000a48:	682b      	ldr	r3, [r5, #0]
 8000a4a:	019b      	lsls	r3, r3, #6
 8000a4c:	d5dc      	bpl.n	8000a08 <HAL_RCC_OscConfig+0x2ac>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000a4e:	f7ff fc6d 	bl	800032c <HAL_GetTick>
 8000a52:	1b00      	subs	r0, r0, r4
 8000a54:	2802      	cmp	r0, #2
 8000a56:	d9f7      	bls.n	8000a48 <HAL_RCC_OscConfig+0x2ec>
 8000a58:	e6bb      	b.n	80007d2 <HAL_RCC_OscConfig+0x76>
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8000a5a:	b002      	add	sp, #8
 8000a5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000a60 <HAL_RCC_GetSysClockFreq>:
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000a60:	4930      	ldr	r1, [pc, #192]	; (8000b24 <HAL_RCC_GetSysClockFreq+0xc4>)
 8000a62:	6888      	ldr	r0, [r1, #8]
 8000a64:	f000 000c 	and.w	r0, r0, #12
 8000a68:	2808      	cmp	r0, #8
 8000a6a:	d008      	beq.n	8000a7e <HAL_RCC_GetSysClockFreq+0x1e>
 8000a6c:	280c      	cmp	r0, #12
 8000a6e:	d02f      	beq.n	8000ad0 <HAL_RCC_GetSysClockFreq+0x70>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000a70:	4a2d      	ldr	r2, [pc, #180]	; (8000b28 <HAL_RCC_GetSysClockFreq+0xc8>)
 8000a72:	4b2e      	ldr	r3, [pc, #184]	; (8000b2c <HAL_RCC_GetSysClockFreq+0xcc>)
 8000a74:	2804      	cmp	r0, #4
 8000a76:	bf0c      	ite	eq
 8000a78:	4618      	moveq	r0, r3
 8000a7a:	4610      	movne	r0, r2
 8000a7c:	4770      	bx	lr
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000a7e:	6848      	ldr	r0, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000a80:	684b      	ldr	r3, [r1, #4]
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000a82:	f000 003f 	and.w	r0, r0, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000a86:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8000a8a:	f647 72c0 	movw	r2, #32704	; 0x7fc0
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8000a8e:	684b      	ldr	r3, [r1, #4]
 8000a90:	fa92 f2a2 	rbit	r2, r2
 8000a94:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8000a98:	fab2 f282 	clz	r2, r2
 8000a9c:	ea01 0103 	and.w	r1, r1, r3
 8000aa0:	fa21 f102 	lsr.w	r1, r1, r2
 8000aa4:	bf14      	ite	ne
 8000aa6:	4a21      	ldrne	r2, [pc, #132]	; (8000b2c <HAL_RCC_GetSysClockFreq+0xcc>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 8000aa8:	4a1f      	ldreq	r2, [pc, #124]	; (8000b28 <HAL_RCC_GetSysClockFreq+0xc8>)
 8000aaa:	fbb2 f0f0 	udiv	r0, r2, r0
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 8000aae:	4a1d      	ldr	r2, [pc, #116]	; (8000b24 <HAL_RCC_GetSysClockFreq+0xc4>)
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 8000ab0:	fb00 f301 	mul.w	r3, r0, r1
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 8000ab4:	6852      	ldr	r2, [r2, #4]
 8000ab6:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8000aba:	fa90 f0a0 	rbit	r0, r0
 8000abe:	fab0 f080 	clz	r0, r0
      
      sysclockfreq = pllvco/pllp;
 8000ac2:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 8000ac6:	fa22 f000 	lsr.w	r0, r2, r0
 8000aca:	3001      	adds	r0, #1
 8000acc:	0040      	lsls	r0, r0, #1
 8000ace:	e025      	b.n	8000b1c <HAL_RCC_GetSysClockFreq+0xbc>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000ad0:	6848      	ldr	r0, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000ad2:	684b      	ldr	r3, [r1, #4]
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000ad4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000ad8:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8000adc:	f647 72c0 	movw	r2, #32704	; 0x7fc0
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8000ae0:	684b      	ldr	r3, [r1, #4]
 8000ae2:	fa92 f2a2 	rbit	r2, r2
 8000ae6:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8000aea:	fab2 f282 	clz	r2, r2
 8000aee:	ea01 0103 	and.w	r1, r1, r3
 8000af2:	fa21 f102 	lsr.w	r1, r1, r2
 8000af6:	bf14      	ite	ne
 8000af8:	4a0c      	ldrne	r2, [pc, #48]	; (8000b2c <HAL_RCC_GetSysClockFreq+0xcc>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8000afa:	4a0b      	ldreq	r2, [pc, #44]	; (8000b28 <HAL_RCC_GetSysClockFreq+0xc8>)
 8000afc:	fbb2 f0f0 	udiv	r0, r2, r0
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> POSITION_VAL(RCC_PLLCFGR_PLLR));
 8000b00:	4a08      	ldr	r2, [pc, #32]	; (8000b24 <HAL_RCC_GetSysClockFreq+0xc4>)
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8000b02:	fb00 f301 	mul.w	r3, r0, r1
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> POSITION_VAL(RCC_PLLCFGR_PLLR));
 8000b06:	6852      	ldr	r2, [r2, #4]
 8000b08:	f04f 40e0 	mov.w	r0, #1879048192	; 0x70000000
 8000b0c:	fa90 f0a0 	rbit	r0, r0
 8000b10:	fab0 f080 	clz	r0, r0
      
      sysclockfreq = pllvco/pllr;
 8000b14:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 8000b18:	fa22 f000 	lsr.w	r0, r2, r0
 8000b1c:	fbb3 f0f0 	udiv	r0, r3, r0
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	40023800 	.word	0x40023800
 8000b28:	00f42400 	.word	0x00f42400
 8000b2c:	007a1200 	.word	0x007a1200

08000b30 <HAL_TIM_PeriodElapsedCallback>:
 8000b30:	4770      	bx	lr

08000b32 <HAL_TIM_OC_DelayElapsedCallback>:
 8000b32:	4770      	bx	lr

08000b34 <HAL_TIM_IC_CaptureCallback>:
 8000b34:	4770      	bx	lr

08000b36 <HAL_TIM_PWM_PulseFinishedCallback>:
 8000b36:	4770      	bx	lr

08000b38 <HAL_TIM_TriggerCallback>:
 8000b38:	4770      	bx	lr

08000b3a <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000b3a:	6803      	ldr	r3, [r0, #0]
 8000b3c:	691a      	ldr	r2, [r3, #16]
 8000b3e:	0791      	lsls	r1, r2, #30
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8000b40:	b510      	push	{r4, lr}
 8000b42:	4604      	mov	r4, r0
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000b44:	d514      	bpl.n	8000b70 <HAL_TIM_IRQHandler+0x36>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8000b46:	68da      	ldr	r2, [r3, #12]
 8000b48:	0792      	lsls	r2, r2, #30
 8000b4a:	d511      	bpl.n	8000b70 <HAL_TIM_IRQHandler+0x36>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8000b4c:	f06f 0202 	mvn.w	r2, #2
 8000b50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000b52:	699b      	ldr	r3, [r3, #24]
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000b54:	2201      	movs	r2, #1
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000b56:	079b      	lsls	r3, r3, #30
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000b58:	7602      	strb	r2, [r0, #24]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000b5a:	d002      	beq.n	8000b62 <HAL_TIM_IRQHandler+0x28>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8000b5c:	f7ff ffea 	bl	8000b34 <HAL_TIM_IC_CaptureCallback>
 8000b60:	e004      	b.n	8000b6c <HAL_TIM_IRQHandler+0x32>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8000b62:	f7ff ffe6 	bl	8000b32 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000b66:	4620      	mov	r0, r4
 8000b68:	f7ff ffe5 	bl	8000b36 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	7623      	strb	r3, [r4, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8000b70:	6823      	ldr	r3, [r4, #0]
 8000b72:	691a      	ldr	r2, [r3, #16]
 8000b74:	0750      	lsls	r0, r2, #29
 8000b76:	d516      	bpl.n	8000ba6 <HAL_TIM_IRQHandler+0x6c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8000b78:	68da      	ldr	r2, [r3, #12]
 8000b7a:	0751      	lsls	r1, r2, #29
 8000b7c:	d513      	bpl.n	8000ba6 <HAL_TIM_IRQHandler+0x6c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8000b7e:	f06f 0204 	mvn.w	r2, #4
 8000b82:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000b84:	699b      	ldr	r3, [r3, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000b86:	2202      	movs	r2, #2
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000b88:	f413 7f40 	tst.w	r3, #768	; 0x300
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000b8c:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8000b8e:	4620      	mov	r0, r4
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000b90:	d002      	beq.n	8000b98 <HAL_TIM_IRQHandler+0x5e>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8000b92:	f7ff ffcf 	bl	8000b34 <HAL_TIM_IC_CaptureCallback>
 8000b96:	e004      	b.n	8000ba2 <HAL_TIM_IRQHandler+0x68>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000b98:	f7ff ffcb 	bl	8000b32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000b9c:	4620      	mov	r0, r4
 8000b9e:	f7ff ffca 	bl	8000b36 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8000ba6:	6823      	ldr	r3, [r4, #0]
 8000ba8:	691a      	ldr	r2, [r3, #16]
 8000baa:	0712      	lsls	r2, r2, #28
 8000bac:	d515      	bpl.n	8000bda <HAL_TIM_IRQHandler+0xa0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8000bae:	68da      	ldr	r2, [r3, #12]
 8000bb0:	0710      	lsls	r0, r2, #28
 8000bb2:	d512      	bpl.n	8000bda <HAL_TIM_IRQHandler+0xa0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8000bb4:	f06f 0208 	mvn.w	r2, #8
 8000bb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000bba:	69db      	ldr	r3, [r3, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000bbc:	2204      	movs	r2, #4
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000bbe:	0799      	lsls	r1, r3, #30
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000bc0:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8000bc2:	4620      	mov	r0, r4
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000bc4:	d002      	beq.n	8000bcc <HAL_TIM_IRQHandler+0x92>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8000bc6:	f7ff ffb5 	bl	8000b34 <HAL_TIM_IC_CaptureCallback>
 8000bca:	e004      	b.n	8000bd6 <HAL_TIM_IRQHandler+0x9c>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000bcc:	f7ff ffb1 	bl	8000b32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8000bd0:	4620      	mov	r0, r4
 8000bd2:	f7ff ffb0 	bl	8000b36 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8000bda:	6823      	ldr	r3, [r4, #0]
 8000bdc:	691a      	ldr	r2, [r3, #16]
 8000bde:	06d2      	lsls	r2, r2, #27
 8000be0:	d516      	bpl.n	8000c10 <HAL_TIM_IRQHandler+0xd6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8000be2:	68da      	ldr	r2, [r3, #12]
 8000be4:	06d0      	lsls	r0, r2, #27
 8000be6:	d513      	bpl.n	8000c10 <HAL_TIM_IRQHandler+0xd6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8000be8:	f06f 0210 	mvn.w	r2, #16
 8000bec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000bee:	69db      	ldr	r3, [r3, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000bf0:	2208      	movs	r2, #8
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000bf2:	f413 7f40 	tst.w	r3, #768	; 0x300
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000bf6:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8000bf8:	4620      	mov	r0, r4
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000bfa:	d002      	beq.n	8000c02 <HAL_TIM_IRQHandler+0xc8>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8000bfc:	f7ff ff9a 	bl	8000b34 <HAL_TIM_IC_CaptureCallback>
 8000c00:	e004      	b.n	8000c0c <HAL_TIM_IRQHandler+0xd2>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000c02:	f7ff ff96 	bl	8000b32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000c06:	4620      	mov	r0, r4
 8000c08:	f7ff ff95 	bl	8000b36 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	7623      	strb	r3, [r4, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8000c10:	6823      	ldr	r3, [r4, #0]
 8000c12:	691a      	ldr	r2, [r3, #16]
 8000c14:	07d1      	lsls	r1, r2, #31
 8000c16:	d508      	bpl.n	8000c2a <HAL_TIM_IRQHandler+0xf0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8000c18:	68da      	ldr	r2, [r3, #12]
 8000c1a:	07d2      	lsls	r2, r2, #31
 8000c1c:	d505      	bpl.n	8000c2a <HAL_TIM_IRQHandler+0xf0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8000c1e:	f06f 0201 	mvn.w	r2, #1
 8000c22:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8000c24:	4620      	mov	r0, r4
 8000c26:	f7ff ff83 	bl	8000b30 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8000c2a:	6823      	ldr	r3, [r4, #0]
 8000c2c:	691a      	ldr	r2, [r3, #16]
 8000c2e:	0610      	lsls	r0, r2, #24
 8000c30:	d508      	bpl.n	8000c44 <HAL_TIM_IRQHandler+0x10a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8000c32:	68da      	ldr	r2, [r3, #12]
 8000c34:	0611      	lsls	r1, r2, #24
 8000c36:	d505      	bpl.n	8000c44 <HAL_TIM_IRQHandler+0x10a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8000c38:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8000c3c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8000c3e:	4620      	mov	r0, r4
 8000c40:	f000 f89d 	bl	8000d7e <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8000c44:	6823      	ldr	r3, [r4, #0]
 8000c46:	691a      	ldr	r2, [r3, #16]
 8000c48:	0652      	lsls	r2, r2, #25
 8000c4a:	d508      	bpl.n	8000c5e <HAL_TIM_IRQHandler+0x124>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8000c4c:	68da      	ldr	r2, [r3, #12]
 8000c4e:	0650      	lsls	r0, r2, #25
 8000c50:	d505      	bpl.n	8000c5e <HAL_TIM_IRQHandler+0x124>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8000c52:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8000c56:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8000c58:	4620      	mov	r0, r4
 8000c5a:	f7ff ff6d 	bl	8000b38 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8000c5e:	6823      	ldr	r3, [r4, #0]
 8000c60:	691a      	ldr	r2, [r3, #16]
 8000c62:	0691      	lsls	r1, r2, #26
 8000c64:	d50a      	bpl.n	8000c7c <HAL_TIM_IRQHandler+0x142>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8000c66:	68da      	ldr	r2, [r3, #12]
 8000c68:	0692      	lsls	r2, r2, #26
 8000c6a:	d507      	bpl.n	8000c7c <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000c6c:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8000c70:	4620      	mov	r0, r4
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000c72:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
    }
  }
}
 8000c74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
      HAL_TIMEx_CommutationCallback(htim);
 8000c78:	f000 b880 	b.w	8000d7c <HAL_TIMEx_CommutationCallback>
 8000c7c:	bd10      	pop	{r4, pc}
	...

08000c80 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8000c80:	4a2e      	ldr	r2, [pc, #184]	; (8000d3c <TIM_Base_SetConfig+0xbc>)
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
 8000c82:	6803      	ldr	r3, [r0, #0]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8000c84:	4290      	cmp	r0, r2
 8000c86:	d012      	beq.n	8000cae <TIM_Base_SetConfig+0x2e>
 8000c88:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000c8c:	d00f      	beq.n	8000cae <TIM_Base_SetConfig+0x2e>
 8000c8e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8000c92:	4290      	cmp	r0, r2
 8000c94:	d00b      	beq.n	8000cae <TIM_Base_SetConfig+0x2e>
 8000c96:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000c9a:	4290      	cmp	r0, r2
 8000c9c:	d007      	beq.n	8000cae <TIM_Base_SetConfig+0x2e>
 8000c9e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000ca2:	4290      	cmp	r0, r2
 8000ca4:	d003      	beq.n	8000cae <TIM_Base_SetConfig+0x2e>
 8000ca6:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8000caa:	4290      	cmp	r0, r2
 8000cac:	d118      	bne.n	8000ce0 <TIM_Base_SetConfig+0x60>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8000cae:	684a      	ldr	r2, [r1, #4]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000cb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8000cb4:	4313      	orrs	r3, r2
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8000cb6:	4a21      	ldr	r2, [pc, #132]	; (8000d3c <TIM_Base_SetConfig+0xbc>)
 8000cb8:	4290      	cmp	r0, r2
 8000cba:	d037      	beq.n	8000d2c <TIM_Base_SetConfig+0xac>
 8000cbc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000cc0:	d034      	beq.n	8000d2c <TIM_Base_SetConfig+0xac>
 8000cc2:	4a1f      	ldr	r2, [pc, #124]	; (8000d40 <TIM_Base_SetConfig+0xc0>)
 8000cc4:	4290      	cmp	r0, r2
 8000cc6:	d031      	beq.n	8000d2c <TIM_Base_SetConfig+0xac>
 8000cc8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000ccc:	4290      	cmp	r0, r2
 8000cce:	d02d      	beq.n	8000d2c <TIM_Base_SetConfig+0xac>
 8000cd0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000cd4:	4290      	cmp	r0, r2
 8000cd6:	d029      	beq.n	8000d2c <TIM_Base_SetConfig+0xac>
 8000cd8:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8000cdc:	4290      	cmp	r0, r2
 8000cde:	d025      	beq.n	8000d2c <TIM_Base_SetConfig+0xac>
 8000ce0:	4a18      	ldr	r2, [pc, #96]	; (8000d44 <TIM_Base_SetConfig+0xc4>)
 8000ce2:	4290      	cmp	r0, r2
 8000ce4:	d022      	beq.n	8000d2c <TIM_Base_SetConfig+0xac>
 8000ce6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000cea:	4290      	cmp	r0, r2
 8000cec:	d01e      	beq.n	8000d2c <TIM_Base_SetConfig+0xac>
 8000cee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000cf2:	4290      	cmp	r0, r2
 8000cf4:	d01a      	beq.n	8000d2c <TIM_Base_SetConfig+0xac>
 8000cf6:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8000cfa:	4290      	cmp	r0, r2
 8000cfc:	d016      	beq.n	8000d2c <TIM_Base_SetConfig+0xac>
 8000cfe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000d02:	4290      	cmp	r0, r2
 8000d04:	d012      	beq.n	8000d2c <TIM_Base_SetConfig+0xac>
 8000d06:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000d0a:	4290      	cmp	r0, r2
 8000d0c:	d00e      	beq.n	8000d2c <TIM_Base_SetConfig+0xac>
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  TIMx->CR1 = tmpcr1;
 8000d0e:	6003      	str	r3, [r0, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000d10:	688b      	ldr	r3, [r1, #8]
 8000d12:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8000d14:	680b      	ldr	r3, [r1, #0]
 8000d16:	6283      	str	r3, [r0, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8000d18:	4b08      	ldr	r3, [pc, #32]	; (8000d3c <TIM_Base_SetConfig+0xbc>)
 8000d1a:	4298      	cmp	r0, r3
 8000d1c:	d00b      	beq.n	8000d36 <TIM_Base_SetConfig+0xb6>
 8000d1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000d22:	4298      	cmp	r0, r3
 8000d24:	d007      	beq.n	8000d36 <TIM_Base_SetConfig+0xb6>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8000d26:	2301      	movs	r3, #1
 8000d28:	6143      	str	r3, [r0, #20]
}
 8000d2a:	4770      	bx	lr
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000d2c:	68ca      	ldr	r2, [r1, #12]
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8000d2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000d32:	4313      	orrs	r3, r2
 8000d34:	e7eb      	b.n	8000d0e <TIM_Base_SetConfig+0x8e>
  TIMx->PSC = (uint32_t)Structure->Prescaler;
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8000d36:	690b      	ldr	r3, [r1, #16]
 8000d38:	6303      	str	r3, [r0, #48]	; 0x30
 8000d3a:	e7f4      	b.n	8000d26 <TIM_Base_SetConfig+0xa6>
 8000d3c:	40010000 	.word	0x40010000
 8000d40:	40000400 	.word	0x40000400
 8000d44:	40014000 	.word	0x40014000

08000d48 <HAL_TIM_Base_Init>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 8000d48:	b510      	push	{r4, lr}
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	b1a0      	cbz	r0, 8000d78 <HAL_TIM_Base_Init+0x30>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 8000d4e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000d52:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000d56:	b91b      	cbnz	r3, 8000d60 <HAL_TIM_Base_Init+0x18>
  {  
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8000d58:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8000d5c:	f000 f9a2 	bl	80010a4 <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8000d60:	2302      	movs	r3, #2
 8000d62:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8000d66:	6820      	ldr	r0, [r4, #0]
 8000d68:	1d21      	adds	r1, r4, #4
 8000d6a:	f7ff ff89 	bl	8000c80 <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  return HAL_OK;
 8000d74:	2000      	movs	r0, #0
 8000d76:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 8000d78:	2001      	movs	r0, #1
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
  
  return HAL_OK;
}
 8000d7a:	bd10      	pop	{r4, pc}

08000d7c <HAL_TIMEx_CommutationCallback>:
 8000d7c:	4770      	bx	lr

08000d7e <HAL_TIMEx_BreakCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8000d7e:	4770      	bx	lr

08000d80 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d82:	b08b      	sub	sp, #44	; 0x2c

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d84:	2400      	movs	r4, #0
 8000d86:	4b2b      	ldr	r3, [pc, #172]	; (8000e34 <MX_GPIO_Init+0xb4>)
 8000d88:	9401      	str	r4, [sp, #4]
 8000d8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOE_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_AM_Pin|LED_VD_Pin|LED_AZ_Pin|LED_VM_Pin, GPIO_PIN_RESET);
 8000d8c:	4f2a      	ldr	r7, [pc, #168]	; (8000e38 <MX_GPIO_Init+0xb8>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 8000d8e:	4e2b      	ldr	r6, [pc, #172]	; (8000e3c <MX_GPIO_Init+0xbc>)
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d90:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000d94:	631a      	str	r2, [r3, #48]	; 0x30
 8000d96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d98:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000d9c:	9201      	str	r2, [sp, #4]
 8000d9e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000da0:	9402      	str	r4, [sp, #8]
 8000da2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000da4:	f042 0210 	orr.w	r2, r2, #16
 8000da8:	631a      	str	r2, [r3, #48]	; 0x30
 8000daa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000dac:	f002 0210 	and.w	r2, r2, #16
 8000db0:	9202      	str	r2, [sp, #8]
 8000db2:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db4:	9403      	str	r4, [sp, #12]
 8000db6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000db8:	f042 0201 	orr.w	r2, r2, #1
 8000dbc:	631a      	str	r2, [r3, #48]	; 0x30
 8000dbe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000dc0:	f002 0201 	and.w	r2, r2, #1
 8000dc4:	9203      	str	r2, [sp, #12]
 8000dc6:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dc8:	9404      	str	r4, [sp, #16]
 8000dca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000dcc:	f042 0208 	orr.w	r2, r2, #8
 8000dd0:	631a      	str	r2, [r3, #48]	; 0x30
 8000dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd4:	f003 0308 	and.w	r3, r3, #8
 8000dd8:	9304      	str	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_AM_Pin|LED_VD_Pin|LED_AZ_Pin|LED_VM_Pin, GPIO_PIN_RESET);
 8000dda:	4622      	mov	r2, r4
 8000ddc:	4638      	mov	r0, r7
 8000dde:	f44f 5170 	mov.w	r1, #15360	; 0x3c00

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOE_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000de2:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_AM_Pin|LED_VD_Pin|LED_AZ_Pin|LED_VM_Pin, GPIO_PIN_RESET);
 8000de4:	f7ff fbfc 	bl	80005e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 8000de8:	4622      	mov	r2, r4
 8000dea:	4630      	mov	r0, r6
 8000dec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000df0:	f7ff fbf6 	bl	80005e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = LED_AM_Pin|LED_VD_Pin|LED_AZ_Pin|LED_VM_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df4:	2501      	movs	r5, #1

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = LED_AM_Pin|LED_VD_Pin|LED_AZ_Pin|LED_VM_Pin;
 8000df6:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000dfa:	a905      	add	r1, sp, #20
 8000dfc:	4638      	mov	r0, r7

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = LED_AM_Pin|LED_VD_Pin|LED_AZ_Pin|LED_VM_Pin;
 8000dfe:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e00:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e02:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e04:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e06:	f7ff fb11 	bl	800042c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Buzzer_Pin;
 8000e0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8000e0e:	a905      	add	r1, sp, #20
 8000e10:	4630      	mov	r0, r6
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Buzzer_Pin;
 8000e12:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e14:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e16:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e18:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8000e1a:	f7ff fb07 	bl	800042c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = Botao_01_Pin|Botao_02_Pin|Botao_03_Pin|Botao_04_Pin;
 8000e1e:	23f0      	movs	r3, #240	; 0xf0
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e20:	a905      	add	r1, sp, #20
 8000e22:	4807      	ldr	r0, [pc, #28]	; (8000e40 <MX_GPIO_Init+0xc0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = Botao_01_Pin|Botao_02_Pin|Botao_03_Pin|Botao_04_Pin;
 8000e24:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e26:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e28:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e2a:	f7ff faff 	bl	800042c <HAL_GPIO_Init>

}
 8000e2e:	b00b      	add	sp, #44	; 0x2c
 8000e30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e32:	bf00      	nop
 8000e34:	40023800 	.word	0x40023800
 8000e38:	40021000 	.word	0x40021000
 8000e3c:	40020000 	.word	0x40020000
 8000e40:	40020c00 	.word	0x40020c00

08000e44 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8000e44:	b510      	push	{r4, lr}
 8000e46:	b094      	sub	sp, #80	; 0x50

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();
 8000e48:	2200      	movs	r2, #0
 8000e4a:	4b20      	ldr	r3, [pc, #128]	; (8000ecc <SystemClock_Config+0x88>)
 8000e4c:	9200      	str	r2, [sp, #0]
 8000e4e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8000e50:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8000e54:	6419      	str	r1, [r3, #64]	; 0x40
 8000e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000e58:	491d      	ldr	r1, [pc, #116]	; (8000ed0 <SystemClock_Config+0x8c>)
{

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();
 8000e5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e5e:	9300      	str	r3, [sp, #0]
 8000e60:	9b00      	ldr	r3, [sp, #0]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000e62:	9201      	str	r2, [sp, #4]
 8000e64:	680b      	ldr	r3, [r1, #0]
 8000e66:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000e6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e6e:	600b      	str	r3, [r1, #0]
 8000e70:	680b      	ldr	r3, [r1, #0]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e72:	920d      	str	r2, [sp, #52]	; 0x34
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000e74:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e78:	9301      	str	r3, [sp, #4]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e7a:	2401      	movs	r4, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e7c:	a807      	add	r0, sp, #28
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000e7e:	9b01      	ldr	r3, [sp, #4]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e80:	9407      	str	r4, [sp, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e82:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e84:	f7ff fc6a 	bl	800075c <HAL_RCC_OscConfig>
 8000e88:	4601      	mov	r1, r0
 8000e8a:	b100      	cbz	r0, 8000e8e <SystemClock_Config+0x4a>
 8000e8c:	e7fe      	b.n	8000e8c <SystemClock_Config+0x48>
  {
    Error_Handler();
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e8e:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e90:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e92:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e94:	9006      	str	r0, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e96:	a802      	add	r0, sp, #8
    Error_Handler();
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000e98:	9403      	str	r4, [sp, #12]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e9a:	9302      	str	r3, [sp, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e9c:	f7ff fba4 	bl	80005e8 <HAL_RCC_ClockConfig>
 8000ea0:	4604      	mov	r4, r0
 8000ea2:	b100      	cbz	r0, 8000ea6 <SystemClock_Config+0x62>
 8000ea4:	e7fe      	b.n	8000ea4 <SystemClock_Config+0x60>
  {
    Error_Handler();
  }

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000ea6:	f7ff fc53 	bl	8000750 <HAL_RCC_GetHCLKFreq>
 8000eaa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eae:	fbb0 f0f3 	udiv	r0, r0, r3
 8000eb2:	f7ff fa93 	bl	80003dc <HAL_SYSTICK_Config>

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000eb6:	2004      	movs	r0, #4
 8000eb8:	f7ff faa6 	bl	8000408 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000ebc:	4622      	mov	r2, r4
 8000ebe:	4621      	mov	r1, r4
 8000ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ec4:	f7ff fa4a 	bl	800035c <HAL_NVIC_SetPriority>
}
 8000ec8:	b014      	add	sp, #80	; 0x50
 8000eca:	bd10      	pop	{r4, pc}
 8000ecc:	40023800 	.word	0x40023800
 8000ed0:	40007000 	.word	0x40007000

08000ed4 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 8000ed4:	e7fe      	b.n	8000ed4 <Error_Handler>
	...

08000ed8 <Botao_Led>:
  {
  }
  /* USER CODE END Error_Handler */ 
}

void Botao_Led(void){
 8000ed8:	b508      	push	{r3, lr}
	if(!(ASM_GPIO_ReadPin(GPIOD, GPIO_PIN_4) == GPIO_PIN_RESET)){
 8000eda:	2110      	movs	r1, #16
 8000edc:	4839      	ldr	r0, [pc, #228]	; (8000fc4 <Botao_Led+0xec>)
 8000ede:	f7ff f991 	bl	8000204 <ASM_GPIO_ReadPin>
 8000ee2:	4602      	mov	r2, r0
 8000ee4:	b150      	cbz	r0, 8000efc <Botao_Led+0x24>
		ASM_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_SET);	//Liga LED VERMELHO
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000eec:	4836      	ldr	r0, [pc, #216]	; (8000fc8 <Botao_Led+0xf0>)
 8000eee:	f7ff f991 	bl	8000214 <ASM_GPIO_WritePin>
		//ASM_GPIO_TogglePin(GPIOA, GPIO_PIN_12);
		ASM_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);	//Aciona Buzzer
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ef8:	4834      	ldr	r0, [pc, #208]	; (8000fcc <Botao_Led+0xf4>)
 8000efa:	e002      	b.n	8000f02 <Botao_Led+0x2a>
	}else {
		ASM_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_RESET);	//Desliga LED VERMELHO
 8000efc:	4832      	ldr	r0, [pc, #200]	; (8000fc8 <Botao_Led+0xf0>)
 8000efe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f02:	f7ff f987 	bl	8000214 <ASM_GPIO_WritePin>
	}

	if(!(ASM_GPIO_ReadPin(GPIOD, GPIO_PIN_5) == GPIO_PIN_RESET)){
 8000f06:	2120      	movs	r1, #32
 8000f08:	482e      	ldr	r0, [pc, #184]	; (8000fc4 <Botao_Led+0xec>)
 8000f0a:	f7ff f97b 	bl	8000204 <ASM_GPIO_ReadPin>
 8000f0e:	4602      	mov	r2, r0
 8000f10:	b150      	cbz	r0, 8000f28 <Botao_Led+0x50>
		ASM_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);	//Liga LED AZUL
 8000f12:	2201      	movs	r2, #1
 8000f14:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f18:	482b      	ldr	r0, [pc, #172]	; (8000fc8 <Botao_Led+0xf0>)
 8000f1a:	f7ff f97b 	bl	8000214 <ASM_GPIO_WritePin>
		//ASM_GPIO_TogglePin(GPIOA, GPIO_PIN_12);
		ASM_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);	//Aciona Buzzer
 8000f1e:	2201      	movs	r2, #1
 8000f20:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f24:	4829      	ldr	r0, [pc, #164]	; (8000fcc <Botao_Led+0xf4>)
 8000f26:	e002      	b.n	8000f2e <Botao_Led+0x56>
	}else {
		ASM_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);	//Desliga LED AZUL
 8000f28:	4827      	ldr	r0, [pc, #156]	; (8000fc8 <Botao_Led+0xf0>)
 8000f2a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f2e:	f7ff f971 	bl	8000214 <ASM_GPIO_WritePin>
	}

	if(!(ASM_GPIO_ReadPin(GPIOD, GPIO_PIN_6) == GPIO_PIN_RESET)){
 8000f32:	2140      	movs	r1, #64	; 0x40
 8000f34:	4823      	ldr	r0, [pc, #140]	; (8000fc4 <Botao_Led+0xec>)
 8000f36:	f7ff f965 	bl	8000204 <ASM_GPIO_ReadPin>
 8000f3a:	4602      	mov	r2, r0
 8000f3c:	b150      	cbz	r0, 8000f54 <Botao_Led+0x7c>
		ASM_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);	//Liga LED VERDE
 8000f3e:	2201      	movs	r2, #1
 8000f40:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f44:	4820      	ldr	r0, [pc, #128]	; (8000fc8 <Botao_Led+0xf0>)
 8000f46:	f7ff f965 	bl	8000214 <ASM_GPIO_WritePin>
		//ASM_GPIO_TogglePin(GPIOA, GPIO_PIN_12);
		ASM_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);	//Aciona Buzzer
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f50:	481e      	ldr	r0, [pc, #120]	; (8000fcc <Botao_Led+0xf4>)
 8000f52:	e002      	b.n	8000f5a <Botao_Led+0x82>
	}else {
		ASM_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);	//Desliga LED VERDE
 8000f54:	481c      	ldr	r0, [pc, #112]	; (8000fc8 <Botao_Led+0xf0>)
 8000f56:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f5a:	f7ff f95b 	bl	8000214 <ASM_GPIO_WritePin>
	}

	if(!(ASM_GPIO_ReadPin(GPIOD, GPIO_PIN_7) == GPIO_PIN_RESET)){
 8000f5e:	2180      	movs	r1, #128	; 0x80
 8000f60:	4818      	ldr	r0, [pc, #96]	; (8000fc4 <Botao_Led+0xec>)
 8000f62:	f7ff f94f 	bl	8000204 <ASM_GPIO_ReadPin>
 8000f66:	4602      	mov	r2, r0
 8000f68:	b150      	cbz	r0, 8000f80 <Botao_Led+0xa8>
		ASM_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_SET);	//Liga LED AMARELO
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f70:	4815      	ldr	r0, [pc, #84]	; (8000fc8 <Botao_Led+0xf0>)
 8000f72:	f7ff f94f 	bl	8000214 <ASM_GPIO_WritePin>
		//ASM_GPIO_TogglePin(GPIOA, GPIO_PIN_12);
		ASM_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);	//Aciona Buzzer
 8000f76:	2201      	movs	r2, #1
 8000f78:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f7c:	4813      	ldr	r0, [pc, #76]	; (8000fcc <Botao_Led+0xf4>)
 8000f7e:	e002      	b.n	8000f86 <Botao_Led+0xae>
	}else {
		ASM_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);	//Desliga LED AMARELO
 8000f80:	4811      	ldr	r0, [pc, #68]	; (8000fc8 <Botao_Led+0xf0>)
 8000f82:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f86:	f7ff f945 	bl	8000214 <ASM_GPIO_WritePin>
	}

	if(ASM_GPIO_ReadPin(GPIOD, GPIO_PIN_4) == GPIO_PIN_RESET && ASM_GPIO_ReadPin(GPIOD, GPIO_PIN_5) == GPIO_PIN_RESET && ASM_GPIO_ReadPin(GPIOD, GPIO_PIN_6) == GPIO_PIN_RESET && ASM_GPIO_ReadPin(GPIOD, GPIO_PIN_7) == GPIO_PIN_RESET)
 8000f8a:	2110      	movs	r1, #16
 8000f8c:	480d      	ldr	r0, [pc, #52]	; (8000fc4 <Botao_Led+0xec>)
 8000f8e:	f7ff f939 	bl	8000204 <ASM_GPIO_ReadPin>
 8000f92:	b9b0      	cbnz	r0, 8000fc2 <Botao_Led+0xea>
 8000f94:	2120      	movs	r1, #32
 8000f96:	480b      	ldr	r0, [pc, #44]	; (8000fc4 <Botao_Led+0xec>)
 8000f98:	f7ff f934 	bl	8000204 <ASM_GPIO_ReadPin>
 8000f9c:	b988      	cbnz	r0, 8000fc2 <Botao_Led+0xea>
 8000f9e:	2140      	movs	r1, #64	; 0x40
 8000fa0:	4808      	ldr	r0, [pc, #32]	; (8000fc4 <Botao_Led+0xec>)
 8000fa2:	f7ff f92f 	bl	8000204 <ASM_GPIO_ReadPin>
 8000fa6:	b960      	cbnz	r0, 8000fc2 <Botao_Led+0xea>
 8000fa8:	2180      	movs	r1, #128	; 0x80
 8000faa:	4806      	ldr	r0, [pc, #24]	; (8000fc4 <Botao_Led+0xec>)
 8000fac:	f7ff f92a 	bl	8000204 <ASM_GPIO_ReadPin>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	b930      	cbnz	r0, 8000fc2 <Botao_Led+0xea>
		ASM_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);	//Desliga Buzzer
 8000fb4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fb8:	4804      	ldr	r0, [pc, #16]	; (8000fcc <Botao_Led+0xf4>)
}
 8000fba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	}else {
		ASM_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);	//Desliga LED AMARELO
	}

	if(ASM_GPIO_ReadPin(GPIOD, GPIO_PIN_4) == GPIO_PIN_RESET && ASM_GPIO_ReadPin(GPIOD, GPIO_PIN_5) == GPIO_PIN_RESET && ASM_GPIO_ReadPin(GPIOD, GPIO_PIN_6) == GPIO_PIN_RESET && ASM_GPIO_ReadPin(GPIOD, GPIO_PIN_7) == GPIO_PIN_RESET)
		ASM_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);	//Desliga Buzzer
 8000fbe:	f7ff b929 	b.w	8000214 <ASM_GPIO_WritePin>
 8000fc2:	bd08      	pop	{r3, pc}
 8000fc4:	40020c00 	.word	0x40020c00
 8000fc8:	40021000 	.word	0x40021000
 8000fcc:	40020000 	.word	0x40020000

08000fd0 <main>:
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

int main(void)
{
 8000fd0:	b508      	push	{r3, lr}
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fd2:	f7ff f989 	bl	80002e8 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8000fd6:	f7ff ff35 	bl	8000e44 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fda:	f7ff fed1 	bl	8000d80 <MX_GPIO_Init>
  MX_TIM13_Init();
 8000fde:	f000 f849 	bl	8001074 <MX_TIM13_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  /* USER CODE END WHILE */

	  Botao_Led();
 8000fe2:	f7ff ff79 	bl	8000ed8 <Botao_Led>
 8000fe6:	e7fc      	b.n	8000fe2 <main+0x12>

08000fe8 <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fe8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fea:	2003      	movs	r0, #3
 8000fec:	f7ff f9a4 	bl	8000338 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	4611      	mov	r1, r2
 8000ff4:	f06f 000b 	mvn.w	r0, #11
 8000ff8:	f7ff f9b0 	bl	800035c <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	4611      	mov	r1, r2
 8001000:	f06f 000a 	mvn.w	r0, #10
 8001004:	f7ff f9aa 	bl	800035c <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8001008:	2200      	movs	r2, #0
 800100a:	4611      	mov	r1, r2
 800100c:	f06f 0009 	mvn.w	r0, #9
 8001010:	f7ff f9a4 	bl	800035c <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8001014:	2200      	movs	r2, #0
 8001016:	4611      	mov	r1, r2
 8001018:	f06f 0004 	mvn.w	r0, #4
 800101c:	f7ff f99e 	bl	800035c <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8001020:	2200      	movs	r2, #0
 8001022:	4611      	mov	r1, r2
 8001024:	f06f 0003 	mvn.w	r0, #3
 8001028:	f7ff f998 	bl	800035c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 800102c:	2200      	movs	r2, #0
 800102e:	4611      	mov	r1, r2
 8001030:	f06f 0001 	mvn.w	r0, #1
 8001034:	f7ff f992 	bl	800035c <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001038:	2200      	movs	r2, #0
 800103a:	4611      	mov	r1, r2
 800103c:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001040:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001044:	f7ff b98a 	b.w	800035c <HAL_NVIC_SetPriority>

08001048 <NMI_Handler>:
 8001048:	4770      	bx	lr

0800104a <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 800104a:	e7fe      	b.n	800104a <HardFault_Handler>

0800104c <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 800104c:	e7fe      	b.n	800104c <MemManage_Handler>

0800104e <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 800104e:	e7fe      	b.n	800104e <BusFault_Handler>

08001050 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8001050:	e7fe      	b.n	8001050 <UsageFault_Handler>

08001052 <SVC_Handler>:
 8001052:	4770      	bx	lr

08001054 <DebugMon_Handler>:
 8001054:	4770      	bx	lr

08001056 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8001056:	4770      	bx	lr

08001058 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001058:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800105a:	f7ff f95f 	bl	800031c <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800105e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  HAL_SYSTICK_IRQHandler();
 8001062:	f7ff b9de 	b.w	8000422 <HAL_SYSTICK_IRQHandler>
	...

08001068 <TIM8_UP_TIM13_IRQHandler>:
void TIM8_UP_TIM13_IRQHandler(void)
{
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8001068:	4801      	ldr	r0, [pc, #4]	; (8001070 <TIM8_UP_TIM13_IRQHandler+0x8>)
 800106a:	f7ff bd66 	b.w	8000b3a <HAL_TIM_IRQHandler>
 800106e:	bf00      	nop
 8001070:	20000024 	.word	0x20000024

08001074 <MX_TIM13_Init>:

/* TIM13 init function */
void MX_TIM13_Init(void)
{

  htim13.Instance = TIM13;
 8001074:	4809      	ldr	r0, [pc, #36]	; (800109c <MX_TIM13_Init+0x28>)
  htim13.Init.Prescaler = 1000;
 8001076:	490a      	ldr	r1, [pc, #40]	; (80010a0 <MX_TIM13_Init+0x2c>)

TIM_HandleTypeDef htim13;

/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8001078:	b508      	push	{r3, lr}

  htim13.Instance = TIM13;
  htim13.Init.Prescaler = 1000;
 800107a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800107e:	e880 000a 	stmia.w	r0, {r1, r3}
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim13.Init.Period = 10;
 8001082:	220a      	movs	r2, #10
void MX_TIM13_Init(void)
{

  htim13.Instance = TIM13;
  htim13.Init.Prescaler = 1000;
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001084:	2300      	movs	r3, #0
 8001086:	6083      	str	r3, [r0, #8]
  htim13.Init.Period = 10;
 8001088:	60c2      	str	r2, [r0, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800108a:	6103      	str	r3, [r0, #16]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800108c:	f7ff fe5c 	bl	8000d48 <HAL_TIM_Base_Init>
 8001090:	b118      	cbz	r0, 800109a <MX_TIM13_Init+0x26>
  {
    Error_Handler();
  }

}
 8001092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim13.Init.Period = 10;
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
  {
    Error_Handler();
 8001096:	f7ff bf1d 	b.w	8000ed4 <Error_Handler>
 800109a:	bd08      	pop	{r3, pc}
 800109c:	20000024 	.word	0x20000024
 80010a0:	40001c00 	.word	0x40001c00

080010a4 <HAL_TIM_Base_MspInit>:
  }

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80010a4:	b507      	push	{r0, r1, r2, lr}

  if(tim_baseHandle->Instance==TIM13)
 80010a6:	4b0d      	ldr	r3, [pc, #52]	; (80010dc <HAL_TIM_Base_MspInit+0x38>)
 80010a8:	6802      	ldr	r2, [r0, #0]
 80010aa:	429a      	cmp	r2, r3
 80010ac:	d113      	bne.n	80010d6 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 80010ae:	2200      	movs	r2, #0
 80010b0:	f503 3307 	add.w	r3, r3, #138240	; 0x21c00
 80010b4:	9201      	str	r2, [sp, #4]
 80010b6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80010b8:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80010bc:	6419      	str	r1, [r3, #64]	; 0x40
 80010be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010c4:	9301      	str	r3, [sp, #4]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80010c6:	202c      	movs	r0, #44	; 0x2c
 80010c8:	4611      	mov	r1, r2
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 80010ca:	9b01      	ldr	r3, [sp, #4]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80010cc:	f7ff f946 	bl	800035c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80010d0:	202c      	movs	r0, #44	; 0x2c
 80010d2:	f7ff f977 	bl	80003c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 80010d6:	b003      	add	sp, #12
 80010d8:	f85d fb04 	ldr.w	pc, [sp], #4
 80010dc:	40001c00 	.word	0x40001c00

080010e0 <__libc_init_array>:
 80010e0:	b570      	push	{r4, r5, r6, lr}
 80010e2:	4b0e      	ldr	r3, [pc, #56]	; (800111c <__libc_init_array+0x3c>)
 80010e4:	4c0e      	ldr	r4, [pc, #56]	; (8001120 <__libc_init_array+0x40>)
 80010e6:	1ae4      	subs	r4, r4, r3
 80010e8:	10a4      	asrs	r4, r4, #2
 80010ea:	2500      	movs	r5, #0
 80010ec:	461e      	mov	r6, r3
 80010ee:	42a5      	cmp	r5, r4
 80010f0:	d004      	beq.n	80010fc <__libc_init_array+0x1c>
 80010f2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80010f6:	4798      	blx	r3
 80010f8:	3501      	adds	r5, #1
 80010fa:	e7f8      	b.n	80010ee <__libc_init_array+0xe>
 80010fc:	f000 f816 	bl	800112c <_init>
 8001100:	4c08      	ldr	r4, [pc, #32]	; (8001124 <__libc_init_array+0x44>)
 8001102:	4b09      	ldr	r3, [pc, #36]	; (8001128 <__libc_init_array+0x48>)
 8001104:	1ae4      	subs	r4, r4, r3
 8001106:	10a4      	asrs	r4, r4, #2
 8001108:	2500      	movs	r5, #0
 800110a:	461e      	mov	r6, r3
 800110c:	42a5      	cmp	r5, r4
 800110e:	d004      	beq.n	800111a <__libc_init_array+0x3a>
 8001110:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001114:	4798      	blx	r3
 8001116:	3501      	adds	r5, #1
 8001118:	e7f8      	b.n	800110c <__libc_init_array+0x2c>
 800111a:	bd70      	pop	{r4, r5, r6, pc}
 800111c:	08001154 	.word	0x08001154
 8001120:	08001154 	.word	0x08001154
 8001124:	08001158 	.word	0x08001158
 8001128:	08001154 	.word	0x08001154

0800112c <_init>:
 800112c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800112e:	bf00      	nop
 8001130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001132:	bc08      	pop	{r3}
 8001134:	469e      	mov	lr, r3
 8001136:	4770      	bx	lr

08001138 <_fini>:
 8001138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800113a:	bf00      	nop
 800113c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800113e:	bc08      	pop	{r3}
 8001140:	469e      	mov	lr, r3
 8001142:	4770      	bx	lr
